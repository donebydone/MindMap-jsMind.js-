"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/stores/mapStore.ts":
/*!********************************!*\
  !*** ./src/stores/mapStore.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _barrel_optimize_names_message_notification_antd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=message,notification!=!antd */ \"(app-pages-browser)/./node_modules/antd/es/message/index.js\");\n/* harmony import */ var _barrel_optimize_names_message_notification_antd__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=message,notification!=!antd */ \"(app-pages-browser)/./node_modules/antd/es/notification/index.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _utils_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/data */ \"(app-pages-browser)/./src/utils/data.ts\");\n\n\n\n\nconst cancelToken = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].CancelToken;\nlet cancel;\nconst defaultReturnCommand = {\n    commandName: \"\",\n    assistantId: \"\",\n    threadId: \"\",\n    commands: \"\",\n    select: \"\",\n    idea: [\n        0,\n        0\n    ],\n    context: [\n        0,\n        0\n    ],\n    content: [\n        0,\n        0\n    ],\n    commandKey: new Date().toString()\n};\nconst defaultMindMap = {\n    meta: {\n        name: \"MindMap\",\n        version: \"0.2\"\n    },\n    format: \"node_array\",\n    projectName: \"Default Project\",\n    data: [\n        {\n            id: \"root\",\n            isroot: true,\n            topic: \"MindMap\",\n            type: \"root\"\n        }\n    ],\n    RequestInstruction: \"\",\n    configuration: {\n        openAIKey: \"\",\n        defaultAssistantId: \"\",\n        defaultThreadId: \"\",\n        commands: []\n    }\n};\nconst createNodeData = (node)=>{\n    return {\n        id: node.id,\n        parentid: node.parent ? node.parent.id : undefined,\n        isroot: node.parent ? false : true,\n        topic: node.topic,\n        type: node.data.type\n    };\n};\nconst jsonToXML = (mindMap)=>{\n    const includedNodeIds = new Set();\n    const getNodeXML = (node)=>{\n        let backgroundColor = \"\";\n        if (node.type === \"Idea\") {\n            backgroundColor = \"#008000\"; // Green\n        } else if (node.type === \"Context\") {\n            backgroundColor = \"#808080\"; // Grey\n        } else if (node.type === \"Content\") {\n            backgroundColor = \"#FFFFFF\"; // White\n        }\n        const children = mindMap.filter((n)=>n.parentid === node.id);\n        const childrenXML = children.map(getNodeXML).join(\"\");\n        includedNodeIds.add(node.id);\n        return '<node ID=\"'.concat(node.id, '\" TEXT=\"').concat(node.topic, '\"').concat(node.isroot ? ' ROOT=\"true\"' : \"\", ' BACKGROUND_COLOR=\"').concat(backgroundColor, '\">').concat(childrenXML, \"</node>\");\n    };\n    const rootNode = mindMap.find((n)=>n.isroot) || mindMap[0];\n    let xmlString = '<map version=\"1.0.1\">\\n<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->\\n';\n    if (rootNode) {\n        xmlString += \"\".concat(getNodeXML(rootNode), \"\\n\");\n    } else {\n        mindMap.forEach((node)=>{\n            if (!includedNodeIds.has(node.id)) {\n                xmlString += \"\".concat(getNodeXML(node), \"\\n\");\n            }\n        });\n    }\n    xmlString += \"</map>\";\n    return xmlString;\n};\nconst jsonToXMLFiltering = (mindMap)=>{\n    const includedNodeIds = new Set();\n    const getNodeXML = (node)=>{\n        let backgroundColor = \"\";\n        if (node.data.type === \"Idea\") {\n            backgroundColor = \"#008000\"; // Green\n        } else if (node.data.type === \"Context\") {\n            backgroundColor = \"#808080\"; // Grey\n        } else if (node.data.type === \"Content\") {\n            backgroundColor = \"#FFFFFF\"; // White\n        }\n        const children = mindMap.filter((n)=>{\n            var _n_parent;\n            return ((_n_parent = n.parent) === null || _n_parent === void 0 ? void 0 : _n_parent.id) === node.id;\n        });\n        const childrenXML = children.map(getNodeXML).join(\"\");\n        includedNodeIds.add(node.id);\n        return '<node ID=\"'.concat(node.id, '\" TEXT=\"').concat(node.topic, '\"').concat(node.isroot ? ' ROOT=\"true\"' : \"\", ' BACKGROUND_COLOR=\"').concat(backgroundColor, '\">').concat(childrenXML, \"</node>\");\n    };\n    const rootNode = mindMap.find((n)=>n.isroot) || mindMap[0];\n    let xmlString = '<map version=\"1.0.1\">\\n<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->\\n';\n    if (rootNode) {\n        xmlString += \"\".concat(getNodeXML(rootNode), \"\\n\");\n    } else {\n        mindMap.forEach((node)=>{\n            if (!includedNodeIds.has(node.id)) {\n                xmlString += \"\".concat(getNodeXML(node), \"\\n\");\n            }\n        });\n    }\n    xmlString += \"</map>\";\n    return xmlString;\n};\nconst jsonToXMLSelectNode = (node)=>{\n    let backgroundColor = \"\";\n    if (node.type === \"Idea\") {\n        backgroundColor = \"#008000\"; // Green\n    } else if (node.type === \"Context\") {\n        backgroundColor = \"#808080\"; // Grey\n    } else if (node.type === \"Content\") {\n        backgroundColor = \"#FFFFFF\"; // White\n    }\n    return '<node ID=\"'.concat(node.id, '\" TEXT=\"').concat(node.topic, '\"').concat(node.isroot ? ' ROOT=\"true\"' : \"\", ' BACKGROUND_COLOR=\"').concat(backgroundColor, '\"></node>');\n};\nconst xmlToJson = (xmlString)=>{\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlString, \"application/xml\");\n    const nodes = [];\n    let isFirstNode = true;\n    const parseNode = (xmlNode, parentId)=>{\n        const id = parentId ? xmlNode.getAttribute(\"ID\") : \"root\";\n        const topic = xmlNode.getAttribute(\"TEXT\");\n        let type = determineNodeType(xmlNode.getAttribute(\"BACKGROUND_COLOR\"));\n        if (type === \"Unknown\") {\n            if (isFirstNode) {\n                type = \"default\";\n                isFirstNode = false;\n            } else {\n                type = \"Content\";\n            }\n        }\n        const node = {\n            id,\n            topic,\n            type,\n            parentid: parentId\n        };\n        if (!parentId) {\n            node.isroot = true;\n        }\n        nodes.push(node);\n        const childNodes = xmlNode.children;\n        for(let i = 0; i < childNodes.length; i++){\n            parseNode(childNodes[i], id);\n        }\n    };\n    const rootElement = xmlDoc.getElementsByTagName(\"node\")[0];\n    if (rootElement) {\n        parseNode(rootElement);\n    }\n    return nodes;\n};\n// Helper function to determine node type based on color\nconst determineNodeType = (color)=>{\n    switch(color){\n        case \"#008000\":\n            return \"Idea\";\n        case \"#808080\":\n            return \"Context\";\n        case \"#FFFFFF\":\n            return \"Content\";\n        default:\n            return \"Unknown\";\n    }\n};\nconst useMindMapStore = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)((set)=>({\n        minds: [],\n        currentMind: null,\n        commandToExecute: null,\n        setCommandToExecute: (command)=>set({\n                commandToExecute: command\n            }),\n        setMinds: (newMinds)=>{\n            localStorage.setItem(\"mindMapData\", JSON.stringify(newMinds));\n            window.dispatchEvent(new Event(\"projectChanged\"));\n            set({\n                minds: newMinds\n            });\n        },\n        addNode: (parentNodeId, newNode)=>set((state)=>{\n                const mind = state.minds[0];\n                const parentNodeExists = mind.data.some((node)=>node.id === parentNodeId);\n                if (parentNodeExists) {\n                    const updatedMind = {\n                        ...mind,\n                        data: [\n                            ...mind.data,\n                            {\n                                ...newNode,\n                                parentid: parentNodeId\n                            }\n                        ]\n                    };\n                    const updatedMinds = state.minds.map((m, index)=>index === 0 ? updatedMind : m);\n                    localStorage.setItem(\"mindMapData\", JSON.stringify(updatedMinds));\n                    window.dispatchEvent(new Event(\"projectChanged\"));\n                    return {\n                        minds: updatedMinds\n                    };\n                } else {\n                    _barrel_optimize_names_message_notification_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"Parent node not found\");\n                    return state;\n                }\n            }),\n        deleteNode: (nodeId)=>set((state)=>{\n                const deleteNodeAndChildren = (nodes, id)=>{\n                    const childrenIds = nodes.filter((node)=>node.parentid === id).map((node)=>node.id);\n                    let filteredNodes = nodes.filter((node)=>node.id !== id);\n                    childrenIds.forEach((childId)=>{\n                        filteredNodes = deleteNodeAndChildren(filteredNodes, childId);\n                    });\n                    return filteredNodes;\n                };\n                const updatedMinds = state.minds.map((mind)=>({\n                        ...mind,\n                        data: deleteNodeAndChildren(mind.data, nodeId)\n                    }));\n                localStorage.setItem(\"mindMapData\", JSON.stringify(updatedMinds));\n                window.dispatchEvent(new Event(\"projectChanged\"));\n                return {\n                    minds: updatedMinds\n                };\n            }),\n        initializeMindMap: ()=>{\n            const mindData = localStorage.getItem(\"mindMapData\");\n            if (!mindData || mindData.length === 2) {\n                localStorage.setItem(\"mindMapData\", JSON.stringify([\n                    defaultMindMap\n                ]));\n                window.dispatchEvent(new Event(\"projectChanged\"));\n                set({\n                    minds: [\n                        defaultMindMap\n                    ],\n                    currentMind: defaultMindMap\n                });\n            } else {\n                const parsedMinds = JSON.parse(mindData);\n                set({\n                    minds: parsedMinds,\n                    currentMind: parsedMinds[0]\n                });\n            }\n        },\n        createNewProject: (projectName)=>set((state)=>{\n                if (!projectName) {\n                    _barrel_optimize_names_message_notification_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"Please input project name\");\n                    return {\n                        minds: state.minds\n                    };\n                }\n                // Retrieve existing projects from localStorage\n                const data = localStorage.getItem(\"mindMapData\");\n                let newProjectName = projectName;\n                if (data) {\n                    try {\n                        const parsedMinds = JSON.parse(data);\n                        // Check if the exact project name exists\n                        const exactProjectExists = parsedMinds.some((project)=>project.projectName === projectName);\n                        if (exactProjectExists) {\n                            // Filter the existing projects that start with the same base name\n                            let existingProjects = parsedMinds.filter((item)=>item.projectName.startsWith(projectName));\n                            // Collect suffixes for all matching projects (e.g., project1, project2, etc.)\n                            const suffixes = existingProjects.map((project)=>{\n                                const match = project.projectName.match(new RegExp(\"^\".concat(projectName, \" (\\\\d+)$\")));\n                                if (match) {\n                                    return parseInt(match[1], 10);\n                                }\n                                return null;\n                            }).filter((suffix)=>suffix !== null); // Remove non-numeric matches\n                            // Sort suffixes to identify gaps\n                            suffixes.sort((a, b)=>a - b);\n                            let newSuffix = 1; // Start from 1, as we are looking for 'project 1', 'project 2', etc.\n                            for(let i = 0; i < suffixes.length; i++){\n                                if (suffixes[i] === newSuffix) {\n                                    newSuffix++;\n                                } else {\n                                    break; // Found a gap, stop here\n                                }\n                            }\n                            // Set the new project name to 'project ' + newSuffix (e.g., 'project 1', 'project 2')\n                            newProjectName = projectName + \" \" + newSuffix;\n                        }\n                    } catch (error) {\n                        console.error(\"Failed to parse mind map data:\", error);\n                    }\n                }\n                // Create the new project with the updated project name\n                const newMindMap = {\n                    ...defaultMindMap,\n                    projectName: newProjectName,\n                    data: [\n                        {\n                            id: \"root\",\n                            isroot: true,\n                            topic: \"New MindMap\",\n                            type: \"root\"\n                        }\n                    ]\n                };\n                // Update the state and localStorage\n                const updatedMinds = [\n                    newMindMap,\n                    ...state.minds\n                ];\n                localStorage.setItem(\"mindMapData\", JSON.stringify(updatedMinds));\n                window.dispatchEvent(new Event(\"projectChanged\"));\n                return {\n                    minds: updatedMinds,\n                    currentMind: newMindMap\n                };\n            }),\n        getProjects: ()=>{\n            const data = localStorage.getItem(\"mindMapData\");\n            if (data) {\n                const parsedMinds = JSON.parse(data);\n                return parsedMinds.map((mind)=>mind.projectName);\n            }\n            return [];\n        },\n        setCurrentProject: (projectName)=>set((state)=>{\n                const selectedMind = state.minds.find((mind)=>mind.projectName === projectName);\n                if (selectedMind) {\n                    const updatedMinds = [\n                        selectedMind,\n                        ...state.minds.filter((mind)=>mind.projectName !== projectName)\n                    ];\n                    localStorage.setItem(\"mindMapData\", JSON.stringify(updatedMinds));\n                    window.dispatchEvent(new Event(\"projectChanged\"));\n                    return {\n                        minds: updatedMinds,\n                        currentMind: selectedMind\n                    };\n                }\n                return state;\n            }),\n        setMindMapProjectName: (projectName)=>{\n            const data = localStorage.getItem(\"mindMapData\");\n            if (data) {\n                try {\n                    const parsedMinds = JSON.parse(data);\n                    let newProjectName = projectName;\n                    // Check if the exact project name exists\n                    const exactProjectExists = parsedMinds.some((project)=>project.projectName === projectName);\n                    if (exactProjectExists) {\n                        // Filter the existing projects that start with the same base name\n                        let existingProjects = parsedMinds.filter((item)=>item.projectName.startsWith(projectName));\n                        // Collect suffixes for all matching projects (e.g., project1, project2, etc.)\n                        const suffixes = existingProjects.map((project)=>{\n                            const match = project.projectName.match(new RegExp(\"^\".concat(projectName, \" (\\\\d+)$\")));\n                            if (match) {\n                                return parseInt(match[1], 10);\n                            }\n                            return null;\n                        }).filter((suffix)=>suffix !== null); // Remove non-numeric matches\n                        // Sort suffixes to identify gaps\n                        suffixes.sort((a, b)=>a - b);\n                        let newSuffix = 1; // Start from 1, as we are looking for 'project 1', 'project 2', etc.\n                        for(let i = 0; i < suffixes.length; i++){\n                            if (suffixes[i] === newSuffix) {\n                                newSuffix++;\n                            } else {\n                                break; // Found a gap, stop here\n                            }\n                        }\n                        // Set the new project name to 'project ' + newSuffix (e.g., 'project 1', 'project 2')\n                        newProjectName = projectName + \" \" + newSuffix;\n                    }\n                    // Update the project name for the first item\n                    if (parsedMinds.length > 0) {\n                        parsedMinds[0].projectName = newProjectName;\n                        localStorage.setItem(\"mindMapData\", JSON.stringify(parsedMinds));\n                        window.dispatchEvent(new Event(\"projectChanged\"));\n                    }\n                } catch (error) {\n                    console.error(\"Failed to parse mind map data:\", error);\n                }\n            }\n        },\n        deleteMindMapProject: ()=>{\n            const data = localStorage.getItem(\"mindMapData\");\n            if (data) {\n                try {\n                    const parsedMinds = JSON.parse(data);\n                    if (parsedMinds.length > 0) {\n                        parsedMinds.shift();\n                        localStorage.setItem(\"mindMapData\", JSON.stringify(parsedMinds));\n                        window.dispatchEvent(new Event(\"projectChanged\"));\n                    }\n                } catch (error) {\n                    console.error(\"Failed to parse mind map data:\", error);\n                }\n            }\n        },\n        downloadFreemind: ()=>{\n            const data = localStorage.getItem(\"mindMapData\");\n            if (data) {\n                try {\n                    const parsedMinds = JSON.parse(data);\n                    const mindMapToDownload = parsedMinds[0].data; // Assuming you want to download the first mind map\n                    const xmlData = jsonToXML(mindMapToDownload);\n                    const blob = new Blob([\n                        xmlData\n                    ], {\n                        type: \"application/xml\"\n                    });\n                    const url = URL.createObjectURL(blob);\n                    const a = document.createElement(\"a\");\n                    a.href = url;\n                    a.download = \"\".concat(parsedMinds[0].projectName, \".mm\");\n                    document.body.appendChild(a);\n                    a.click();\n                    document.body.removeChild(a);\n                } catch (error) {\n                    console.error(\"Failed to parse mind map data:\", error);\n                }\n            }\n        },\n        downloadProject: ()=>{\n            const data = localStorage.getItem(\"mindMapData\");\n            if (data) {\n                try {\n                    const parsedMinds = JSON.parse(data);\n                    const mindMapToDownload = parsedMinds[0]; // Assuming you want to download the first mind map\n                    const blob = new Blob([\n                        JSON.stringify(mindMapToDownload)\n                    ], {\n                        type: \"application/json\"\n                    });\n                    const url = URL.createObjectURL(blob);\n                    const a = document.createElement(\"a\");\n                    a.href = url;\n                    a.download = \"\".concat(mindMapToDownload.projectName, \".json\");\n                    document.body.appendChild(a);\n                    a.click();\n                    document.body.removeChild(a);\n                } catch (error) {\n                    console.error(\"Failed to parse mind map data:\", error);\n                }\n            }\n        },\n        loadProject: async ()=>{\n            try {\n                const data = await (0,_utils_data__WEBPACK_IMPORTED_MODULE_0__.loadFromJSON)(); // Assuming loadFromJSON returns the loaded data as MindMap\n                (0,_utils_data__WEBPACK_IMPORTED_MODULE_0__.restoreData)(data);\n            } catch (error) {\n                console.error(\"Failed to load Freemind data:\", error);\n            }\n            return false;\n        },\n        loadFreeMind: async ()=>{\n            try {\n                const file = await (0,_utils_data__WEBPACK_IMPORTED_MODULE_0__.loadFromMM)();\n                const fileReader = new FileReader();\n                fileReader.onload = ()=>{\n                    const xmlString = fileReader.result;\n                    const jsonData = xmlToJson(xmlString);\n                    const storageData = localStorage.getItem(\"mindMapData\");\n                    if (storageData) {\n                        const mindData = JSON.parse(storageData);\n                        const newMindMap = {\n                            meta: {\n                                name: \"MindMap\",\n                                version: \"0.2\"\n                            },\n                            format: \"node_array\",\n                            projectName: \"New Freemind \".concat(new Date().getTime()),\n                            data: jsonData,\n                            RequestInstruction: \"\",\n                            configuration: {\n                                openAIKey: \"\",\n                                defaultAssistantId: \"\",\n                                defaultThreadId: \"\",\n                                commands: []\n                            }\n                        };\n                        mindData.unshift(newMindMap);\n                        localStorage.setItem(\"mindMapData\", JSON.stringify(mindData));\n                        window.dispatchEvent(new Event(\"projectChanged\"));\n                    }\n                };\n                fileReader.readAsText(file);\n                return true;\n            } catch (error) {\n                console.error(error);\n            }\n            return false;\n        },\n        setRequestContent: (value)=>{\n            const data = localStorage.getItem(\"mindMapData\");\n            if (data) {\n                const mindData = JSON.parse(data);\n                mindData[0].RequestInstruction = value;\n                localStorage.setItem(\"mindMapData\", JSON.stringify(mindData));\n            }\n        },\n        getDatas: ()=>{\n            const data = localStorage.getItem(\"mindMapData\");\n            if (data) {\n                return JSON.parse(data);\n            } else {\n                return [];\n            }\n        },\n        saveConfigurationDefaultValue: (openAIKey, defaultAssistantId, defaultThreadId)=>{\n            const data = localStorage.getItem(\"mindMapData\");\n            if (data) {\n                const mindData = JSON.parse(data);\n                mindData[0].configuration.openAIKey = openAIKey;\n                mindData[0].configuration.defaultAssistantId = defaultAssistantId;\n                mindData[0].configuration.defaultThreadId = defaultThreadId;\n                localStorage.setItem(\"mindMapData\", JSON.stringify(mindData));\n                window.dispatchEvent(new Event(\"projectChanged\"));\n            }\n        },\n        addCommand: ()=>{\n            let idea = [\n                0,\n                0\n            ];\n            let content = [\n                0,\n                0\n            ];\n            let context = [\n                0,\n                0\n            ];\n            const command = {\n                commandName: \"\",\n                assistantId: \"\",\n                threadId: \"\",\n                select: \"\",\n                idea: idea,\n                content: content,\n                context: context,\n                commands: \"\",\n                commandKey: new Date().toString()\n            };\n            const storageData = localStorage.getItem(\"mindMapData\");\n            if (storageData) {\n                const data = JSON.parse(storageData);\n                data[0].configuration.commands.push(command);\n                localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                window.dispatchEvent(new Event(\"projectChanged\"));\n            }\n        },\n        deleteCommand: (index)=>{\n            const storageData = localStorage.getItem(\"mindMapData\");\n            if (storageData) {\n                const data = JSON.parse(storageData);\n                if (data.length > 0) {\n                    data[0].configuration.commands.splice(index, 1);\n                    localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                    window.dispatchEvent(new Event(\"projectChanged\"));\n                }\n            }\n        },\n        saveCommand: (commandName, assistantId, threadId, select, idea, context, content, commands, id)=>{\n            const storageData = localStorage.getItem(\"mindMapData\");\n            if (storageData) {\n                const data = JSON.parse(storageData);\n                const command = {\n                    commandName,\n                    assistantId,\n                    threadId,\n                    select,\n                    idea: idea,\n                    content: content,\n                    context: context,\n                    commands,\n                    commandKey: new Date().toString()\n                };\n                data[0].configuration.commands[id] = command;\n                localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                window.dispatchEvent(new Event(\"projectChanged\"));\n            }\n        },\n        getCommand: (index)=>{\n            const mindMapData = localStorage.getItem(\"mindMapData\");\n            if (mindMapData) {\n                const data = JSON.parse(mindMapData);\n                if (data[0].configuration.commands[0]) {\n                    let commandData;\n                    commandData = data[0].configuration.commands[index];\n                    const command = {\n                        commandName: commandData.commandName,\n                        assistantId: commandData.assistantId,\n                        threadId: commandData.threadId,\n                        select: commandData.select,\n                        commands: commandData.commands,\n                        idea: commandData.idea,\n                        context: commandData.context,\n                        content: commandData.content,\n                        commandKey: new Date().toString()\n                    };\n                    return command;\n                } else {\n                    return defaultReturnCommand;\n                }\n            }\n            return defaultReturnCommand;\n        },\n        getCommands: ()=>{\n            const mindMapData = localStorage.getItem(\"mindMapData\");\n            if (mindMapData) {\n                const data = JSON.parse(mindMapData);\n                return data[0].configuration.commands;\n            }\n        },\n        saveCommandReorder: (commands)=>{\n            const mindData = localStorage.getItem(\"mindMapData\");\n            if (mindData) {\n                const data = JSON.parse(mindData);\n                if (data) {\n                    data[0].configuration.commands = commands;\n                    localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                    window.dispatchEvent(new Event(\"projectChanged\"));\n                }\n            }\n        },\n        updateNodeContent: (nodeId, newContent)=>{\n            const mindMapData = localStorage.getItem(\"mindMapData\");\n            if (mindMapData) {\n                const data = JSON.parse(mindMapData);\n                data[0].data.map((item)=>{\n                    if (item.id === nodeId) {\n                        item.topic = newContent;\n                    }\n                });\n                localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                window.dispatchEvent(new Event(\"projectChanged\"));\n            }\n        },\n        getDefaultThreadId: ()=>{\n            const mindMapData = localStorage.getItem(\"mindMapData\");\n            if (mindMapData) {\n                const data = JSON.parse(mindMapData);\n                return data[0].configuration.defaultThreadId;\n            }\n        },\n        getOpenAIKey: ()=>{\n            const mindMapData = localStorage.getItem(\"mindMapData\");\n            if (mindMapData) {\n                const data = JSON.parse(mindMapData);\n                return data[0].configuration.openAIKey;\n            }\n        },\n        getDefaultAssistantId: ()=>{\n            const mindMapData = localStorage.getItem(\"mindMapData\");\n            if (mindMapData) {\n                const data = JSON.parse(mindMapData);\n                return data[0].configuration.defaultAssistantId;\n            }\n        },\n        getConfiguration: ()=>{\n            const mindMapData = localStorage.getItem(\"mindMapData\");\n            if (mindMapData) {\n                const data = JSON.parse(mindMapData);\n                return data[0].configuration;\n            }\n        },\n        executeCommand: async (key, parentId, node, nodeType, cancelToken)=>{\n            const mindMapData = localStorage.getItem(\"mindMapData\");\n            if (mindMapData) {\n                const data = JSON.parse(mindMapData);\n                const openAIKey = data[0].configuration.openAIKey;\n                const defaultAssistantId = data[0].configuration.defaultAssistantId;\n                const defaultThreadId = data[0].configuration.defaultThreadId;\n                const requestInstruction = data[0].RequestInstruction;\n                try {\n                    const currentCommand = data[0].configuration.commands[key];\n                    let ideaHeadLevel, ideaDepth, contextHeadLevel, contextDepth, contentHeadLevel, contentDepth;\n                    ideaHeadLevel = currentCommand.idea[0];\n                    ideaDepth = currentCommand.idea[1] - 1;\n                    contextHeadLevel = currentCommand.context[0];\n                    contextDepth = currentCommand.context[1] - 1;\n                    contentHeadLevel = currentCommand.content[0];\n                    contentDepth = currentCommand.content[1] - 1;\n                    console.log(ideaHeadLevel, contextHeadLevel, contentHeadLevel);\n                    let promptNodes = [];\n                    if (node.id === \"root\") {\n                        promptNodes.push(createNodeData(node));\n                    } else {\n                        const findRootNode = (currentNode, level)=>{\n                            let rootNode = currentNode;\n                            while(level){\n                                if (rootNode.data.type == \"root\" && level > 0) {\n                                    return;\n                                } else {\n                                    rootNode = rootNode.parent;\n                                }\n                                level = level - 1;\n                            }\n                            return rootNode;\n                        };\n                        const getNodesWithinDepth = function(node, maxDepth, nodeType) {\n                            let currentDepth = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n                            if (node == undefined) {\n                                return [];\n                            }\n                            if (currentDepth >= maxDepth) {\n                                return [];\n                            }\n                            let nodes = [];\n                            if (node.children && node.children.length > 0) {\n                                node.children.forEach((child)=>{\n                                    if (child.data.type === nodeType) {\n                                        nodes.push(child);\n                                    }\n                                    nodes = nodes.concat(getNodesWithinDepth(child, maxDepth, nodeType, currentDepth + 1));\n                                });\n                            }\n                            return nodes;\n                        };\n                        const removeDuplicates = (data)=>{\n                            const seenIds = new Set();\n                            return data.filter((item)=>{\n                                if (seenIds.has(item.id)) {\n                                    return false; // Duplicate found, skip it\n                                } else {\n                                    seenIds.add(item.id);\n                                    return true; // Not a duplicate, keep it\n                                }\n                            });\n                        };\n                        const ideaRootNode = findRootNode(node, ideaHeadLevel);\n                        const contextRootNode = findRootNode(node, contextHeadLevel);\n                        const contentRootNode = findRootNode(node, contentHeadLevel);\n                        console.log(ideaRootNode, contextRootNode, contentRootNode);\n                        if (!ideaRootNode || !contextRootNode || !contentRootNode) {\n                            const nodeType = !ideaRootNode ? \"Ideas\" : !contextRootNode ? \"Context\" : \"Content\";\n                            _barrel_optimize_names_message_notification_antd__WEBPACK_IMPORTED_MODULE_4__[\"default\"].error({\n                                message: \"Please check \".concat(nodeType, \"'s Head Levels. This value is too big for selected node.\")\n                            });\n                            window.dispatchEvent(new Event(\"projectChanged\"));\n                            const event = new CustomEvent(\"threadIdUpdated\", {\n                                detail: {\n                                    key\n                                }\n                            });\n                            window.dispatchEvent(event);\n                            return;\n                        }\n                        promptNodes = [\n                            ...promptNodes,\n                            ...getNodesWithinDepth(ideaRootNode, ideaDepth, \"Idea\") || []\n                        ];\n                        promptNodes = [\n                            ...promptNodes,\n                            ...getNodesWithinDepth(contextRootNode, contextDepth, \"Context\") || []\n                        ];\n                        promptNodes = [\n                            ...promptNodes,\n                            ...getNodesWithinDepth(contentRootNode, contentDepth, \"Content\") || []\n                        ];\n                        if (ideaRootNode) {\n                            promptNodes.unshift(ideaRootNode);\n                        }\n                        if (contextRootNode) {\n                            promptNodes.unshift(contextRootNode);\n                        }\n                        if (contentRootNode) {\n                            promptNodes.unshift(contentRootNode);\n                        }\n                        promptNodes = [\n                            ...removeDuplicates(promptNodes)\n                        ];\n                        console.log(promptNodes);\n                    }\n                    promptNodes.sort((a, b)=>{\n                        // Extract numeric part after '#' in id\n                        const idA = parseInt(a.id.split(\"#\")[1], 10);\n                        const idB = parseInt(b.id.split(\"#\")[1], 10);\n                        // Compare the numeric parts\n                        return idA - idB;\n                    });\n                    console.log(promptNodes, \"This is mindmap array data and it is include selected node and parent or brother nodes if they are seleted.\");\n                    const xmlData = jsonToXMLFiltering(promptNodes);\n                    console.log(xmlData, \"This is mindmap xml data and it is include selected node and parent or brother nodes if they are seleted.\");\n                    const selectNodeXmlData = jsonToXMLSelectNode(node);\n                    const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(\"/api/commandOpenai\", {\n                        openAIKey: openAIKey,\n                        defaultAssistantId: currentCommand.assistantId == \"\" ? defaultAssistantId : currentCommand.assistantId,\n                        prompt: currentCommand.commands,\n                        threadId: currentCommand.threadId == \"\" ? defaultThreadId : currentCommand.threadId,\n                        nodes: xmlData,\n                        selectNode: selectNodeXmlData,\n                        general_prompt: requestInstruction\n                    }, {\n                        cancelToken: cancelToken\n                    });\n                    const content = response.data.message.content;\n                    const type = nodeType;\n                    if (nodeType != \"Edit Node\") {\n                        if (Array.isArray(content)) {\n                            const threadId = data[0].configuration.defaultThreadId;\n                            let count = 0;\n                            content.forEach((value)=>{\n                                let node = {\n                                    id: \"\".concat(type, \"_#\").concat(new Date().getTime() + count),\n                                    parentid: parentId,\n                                    isroot: false,\n                                    topic: value,\n                                    type: type\n                                };\n                                data[0].data.push(node);\n                                count++;\n                            });\n                            if (currentCommand.threadId === \"\") {\n                                currentCommand.threadId = threadId;\n                                localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                                window.dispatchEvent(new Event(\"projectChanged\"));\n                                const event = new CustomEvent(\"threadIdUpdated\", {\n                                    detail: {\n                                        key\n                                    }\n                                });\n                                window.dispatchEvent(event);\n                            } else {\n                                localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                                window.dispatchEvent(new Event(\"projectChanged\"));\n                                const event = new CustomEvent(\"threadIdUpdated\", {\n                                    detail: {\n                                        key\n                                    }\n                                });\n                                window.dispatchEvent(event);\n                            }\n                        } else {\n                            const threadId = data[0].configuration.defaultThreadId;\n                            let count = 0;\n                            let node = {\n                                id: \"\".concat(type, \"_#\").concat(new Date().getTime() + count),\n                                parentid: parentId,\n                                isroot: false,\n                                topic: content,\n                                type: type\n                            };\n                            data[0].data.push(node);\n                            count++;\n                            if (currentCommand.threadId === \"\") {\n                                currentCommand.threadId = threadId;\n                                localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                                window.dispatchEvent(new Event(\"projectChanged\"));\n                                const event = new CustomEvent(\"threadIdUpdated\", {\n                                    detail: {\n                                        key\n                                    }\n                                });\n                                window.dispatchEvent(event);\n                            } else {\n                                localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                                window.dispatchEvent(new Event(\"projectChanged\"));\n                                const event = new CustomEvent(\"threadIdUpdated\", {\n                                    detail: {\n                                        key\n                                    }\n                                });\n                                window.dispatchEvent(event);\n                            }\n                        }\n                    } else {\n                        if (Array.isArray(content)) {\n                            const threadId = data[0].configuration.defaultThreadId;\n                            data[0].data.forEach((element)=>{\n                                if (element.id === node.id) {\n                                    element.topic = content[0];\n                                }\n                            });\n                            if (currentCommand.threadId === \"\") {\n                                currentCommand.threadId = threadId;\n                                localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                            } else {\n                                localStorage.setItem(\"mindMapData\", JSON.stringify(data));\n                            }\n                            window.dispatchEvent(new Event(\"projectChanged\"));\n                            const event = new CustomEvent(\"threadIdUpdated\", {\n                                detail: {\n                                    key\n                                }\n                            });\n                            window.dispatchEvent(event);\n                        } else {\n                            throw new Error(\"Invalid message content\");\n                        }\n                    }\n                } catch (error) {\n                    if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isCancel(error)) {} else {\n                        if (error.response.status) {\n                            const errorStatus = error.response.status;\n                            const event = new CustomEvent(\"errorOccurs\", {\n                                detail: {\n                                    errorStatus\n                                }\n                            });\n                            window.dispatchEvent(event);\n                        }\n                    }\n                }\n            }\n        }\n    }));\n/* harmony default export */ __webpack_exports__[\"default\"] = (useMindMapStore);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/stores/mapStore.ts\n"));

/***/ })

});